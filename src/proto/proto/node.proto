syntax = "proto3";

import "bill.proto";
import "account.proto";
import "session.proto";
import "database.proto";
import "event.proto";
import "mutation.proto";

package node_proto;

message NetworkStatus {
    uint64 total_database_count = 1;
    uint64 total_collection_count = 2;
    uint64 total_document_count = 3;
    uint64 total_account_count = 4;
    uint64 total_mutation_count = 5;
    uint64 total_session_count = 6;
    uint64 total_storage_in_bytes = 7;
    bool query_session_enabled = 8;
}

message QueryBillKey {
    uint64 height = 1;
    string session_token = 2;
}

message QueryBillRequest {
    QueryBillKey query_bill_key = 1;
}

message QueryBillResponse {
    repeated bill_proto.Bill bills = 1;
}

message SessionIdentifier {
    string session_token = 1;
}


message GetAccountRequest {
    bytes addr = 1;
}


message GetAccountResponse {
    account_proto.Account account = 1;
}

message GetSessionInfoRequest {
    // the hex encoded string
    SessionIdentifier session_identifier = 1;
}

message OpenSessionRequest {
    bytes payload = 1;
    bytes signature = 2;
    mutation_proto.PayloadType payload_type = 3;
}

message OpenSessionResponse {
    session_proto.QuerySessionInfo query_session_info = 1;
    int64 session_timeout_second = 2;
    int32 max_query_limit = 3;
    string session_token = 4;
}

message CloseSessionRequest {
    // the query session info
    bytes payload = 1;
    // the signature of query session info
    bytes signature = 2;
    string session_token = 3;
    mutation_proto.PayloadType payload_type = 4;
}

message CloseSessionResponse {
    session_proto.QuerySessionInfo query_session_info = 1;
    bytes hash = 2;
}

message GetSessionInfoResponse {
    int32 session_status = 1;
    session_proto.QuerySessionInfo session_info = 2;
}

message BroadcastRequest {
    bytes body = 1;
}

message BroadcastResponse {
    bytes hash = 2;
}

message ShowDatabaseRequest {
    string session_token = 1;
    // the database address in hex format
    string address = 2;
    // the owner address in hex format
    string owner_address = 3;
}

message ShowDatabaseResponse {
    repeated database_proto.Database dbs = 1;
}

message RunQueryRequest {
    string session_token = 1;
    // a hex string
    string address = 2;
    database_proto.StructuredQuery query = 3;
    // TODO: support paging setting (e.g page_size, page_token)
    // TODO: support document mask
}
message GetDocumentRequest {
    string session_token = 1;
    // a hex string
    string id = 2;
}

message GetDocumentResponse {
    database_proto.Document document = 1;
}

message RunQueryResponse{
    repeated database_proto.Document documents = 2;
    // TODO: support next_page_token for page loading
}

message ShowNetworkStatusRequest {}

message SubscribeRequest {
    string session_token = 1;
    event_proto.Subscription sub = 2;
}

service StorageNode {
    // method for querying bills by height
    rpc QueryBill(QueryBillRequest) returns (QueryBillResponse) {}
    // method for open query session
    rpc OpenQuerySession(OpenSessionRequest) returns (OpenSessionResponse) {}
    // method for close query session
    rpc CloseQuerySession(CloseSessionRequest) returns (CloseSessionResponse) {}
    // method for querying account
    rpc GetAccount(GetAccountRequest) returns (GetAccountResponse) {}
    rpc GetSessionInfo(GetSessionInfoRequest) returns (GetSessionInfoResponse) {}
    // method for broadcast request
    rpc Broadcast(BroadcastRequest) returns (BroadcastResponse) {}
    // method for show database
    rpc ShowDatabase(ShowDatabaseRequest) returns (ShowDatabaseResponse) {}
    // method for query document
    rpc RunQuery(RunQueryRequest) returns (RunQueryResponse) {}
    // method for get document
    rpc GetDocument(GetDocumentRequest) returns (GetDocumentResponse) {}
    // method for show the network status
    rpc ShowNetworkStatus(ShowNetworkStatusRequest) returns (NetworkStatus){}
    // method for subscribution
    rpc Subscribe(SubscribeRequest) returns (stream event_proto.EventMessage) {}
}